{"version":3,"sources":["components/Header.js","components/Color.js","redux/actions.js","components/TintShade.js","functions/index.js","components/Option.js","components/Picker.js","components/Main.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","redux/reducers.js","index.js"],"names":["Header","className","Color","props","Fragment","style","background","color","onClick","copyText","document","getElementById","id","innerHTML","copyIcon","checkIcon","classList","toggle","setTimeout","navigator","clipboard","writeText","handleClick","code","getColor","payload","type","TintShade","useSelector","state","palette","dispatch","useDispatch","shades_tints","convert","require","tints","shades","origin","slice","hsl","hex","h","s","l","tint_l","i","tint_l_value","push","shade_l","shade_l_value","newTints","map","e","reverse","newShades","concat","generateTintShade","useEffect","a","b","Option","icon","name","node","Randomizer","random","min","max","Math","floor","randomHex","Picker","value","onChange","target","HexInput","ColorInput","Main","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","allReducers","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2eaaa71.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n\treturn (\r\n\t\t<header className=\"font-bold uppercase text-2xl w-screen\">\r\n\t\t\t<div className=\"flex flex-wrap justify-center items-center bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 text-min-0 text-4xl text-center p-8\">\r\n\t\t\t\t<span className=\"bg-min-0 text-min-9 rounded px-3 py-1 mx-4 my-3\">Tint</span>&\r\n\t\t\t\t<span className=\"bg-min-9 text-min-0 rounded px-3 py-1 mx-4 my-2\">Shade</span>Generator\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nfunction Color(props) {\r\n\r\n\tconst handleClick = () => {\r\n\t\tlet copyText = document.getElementById(props.id).innerHTML\r\n\t\tlet copyIcon = document.getElementById(`${props.id}-copy`)\r\n\t\tlet checkIcon = document.getElementById(`${props.id}-check`)\r\n\t\tcopyIcon.classList.toggle(\"hidden\")\r\n\t\tcheckIcon.classList.toggle(\"hidden\")\r\n\t\tsetTimeout(() => {\r\n\t\t\tcopyIcon.classList.toggle(\"hidden\")\r\n\t\t\tcheckIcon.classList.toggle(\"hidden\")\r\n\t\t}, 1000)\r\n\t\tnavigator.clipboard.writeText(`#${copyText}`)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"aspect-w-1 aspect-h-1\" style={{ background: props.color }}>\r\n\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"opacity-0 hover:opacity-100 transition-opacity duration-300 cursor-pointer text-white\"\r\n\t\t\t\t\t\tonClick={() => handleClick()}>\r\n\t\t\t\t\t\t<span id={`${props.id}-copy`} ><FileCopyOutlinedIcon /></span>\r\n\t\t\t\t\t\t<span id={`${props.id}-check`} className=\"hidden\"><DoneIcon /></span>\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tid={props.id}\r\n\t\t\t\t\tclassName=\"text-xs text-center uppercase py-4 \">\r\n\t\t\t\t\t{props.code}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default Color\r\n","export const getColor = (payload) => {\r\n\treturn {\r\n\t\ttype: 'GET_COLOR',\r\n\t\tpayload\r\n\t}\r\n}\r\n\r\nexport const setTintsAndShades = (payload) => {\r\n\treturn {\r\n\t\ttype: 'SET_TINTS_AND_SHADES',\r\n\t\tpayload\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport Color from \"./Color\";\r\nimport {useEffect} from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setTintsAndShades } from \"../redux/actions\"\r\nimport { generateTintShade } from \"../functions\"\r\n\r\nfunction TintShade() {\r\n\r\n\tconst color = useSelector(state => state.color)\r\n\tconst palette = useSelector(state => state.palette)\r\n\tconst dispatch = useDispatch()\r\n\tconst shades_tints = generateTintShade(color).map(e => \"#\" + e)\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(setTintsAndShades(shades_tints))\r\n\t}, [color, dispatch, shades_tints])\r\n\r\n\tconst shadeTint = () => shades_tints.map( (e, i) =>\r\n\t\t<Color\r\n\t\t\tkey={i}\r\n\t\t\tid={`${e}-${i}`}\r\n\t\t\tcolor={e}\r\n\t\t\tcode={`${e.slice(1)}`}\r\n\t\t/>\r\n\t)\r\n\r\n\tconst colorCodeList = () => palette.map((a,b) => <li key={b} className=\"uppercase font-mono\">{a}</li>)\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{shadeTint()}\r\n\t\t\t<section className=\"w-screen text-center bg-white p-8\">\r\n\t\t\t\t<h2 className=\"font-bold text-2xl uppercase p-4\">Generated Hex List From Tints to Shades</h2>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{colorCodeList()}\r\n\t\t\t\t</ul>\r\n\t\t\t</section>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default TintShade\r\n","export const generateTintShade = (color) => {\r\n\tconst convert = require('color-convert') // npm install color-convert\r\n\r\n\tlet tints = []\r\n\tlet shades = []\r\n\tlet origin = color.slice(1)\r\n\r\n\tconst hsl = convert.hex.hsl(color)\r\n\tconst h = hsl[0]\r\n\tconst s = hsl[1]\r\n\tconst l = hsl[2]\r\n\r\n\tconst tint_l = (100 - l) / 5\r\n\tfor (let i = 0, tint_l_value = l + tint_l; i < 4; i++, tint_l_value+=tint_l) {\r\n\t\ttints.push([h, s, tint_l_value])\r\n\t}\r\n\r\n\tconst shade_l = l / 5\r\n\tfor (let i = 0, shade_l_value = l - shade_l; i < 4; i++, shade_l_value-=shade_l) {\r\n\t\tshades.push([h, s, shade_l_value])\r\n\t}\r\n\r\n\tconst newTints = tints.map(e => convert.hsl.hex(e)).reverse()\r\n\tconst newShades = shades.map(e => convert.hsl.hex(e))\r\n\r\n\treturn newTints.concat(origin).concat(newShades)\r\n}\r\n\r\n\r\nexport const toHexPallet = (hslPalette) => {\r\n\tconst convert = require('color-convert')\r\n\treturn [...hslPalette].map(e => convert.hsl.hex(e))\r\n}\r\n\r\nexport const randomHex = () => {\r\n\tconst random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\r\n\tconst convert = require('color-convert')\r\n\tconst h = random(0, 360)\r\n\tconst s = random(10, 40)\r\n\tconst l = random(40, 80)\r\n\tconst hex = \"#\".concat(convert.hsl.hex(h, s, l))\r\n\treturn hex\r\n}\r\n","import React from 'react';\r\n\r\nfunction Option(props) {\r\n\treturn (\r\n\t\t<div className=\"grid grid-cols-12 justify-center items-stretch bg-white rounded m-2\">\r\n\t\t\t<div className=\"col-span-2 py-4 flex justify-center items-center bg-min-1 h-full\">{props.icon}</div>\r\n\t\t\t<div className=\"col-span-4 py-4 flex justify-center items-center bg-min-0 h-full\">{props.name}</div>\r\n\t\t\t<div className=\"col-span-6 bg-min-5 aspect-w-4 lg:aspect-w-3 aspect-h-1 flex justify-center items-center\">{props.node}</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Option\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getColor } from \"../redux/actions\"\r\nimport { randomHex } from \"../functions\"\r\nimport Option from \"./Option\"\r\nimport {MdColorLens, MdColorize, MdFormatColorText} from \"react-icons/md\"\r\nimport {GiClick} from \"react-icons/gi\"\r\n\r\nfunction Randomizer(props) {\r\n\tconst dispatch = useDispatch()\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"bg-min-9 w-full h-full flex justify-center items-center text-white text-2xl cursor-pointer\"\r\n\t\t\tonClick={() => dispatch(getColor(randomHex()))}\r\n\t\t>\r\n\t\t\t<span className=\"animate-bounce\"><GiClick /></span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction Picker(props) {\r\n\tconst color = useSelector(state => state.color)\r\n\tconst dispatch = useDispatch()\r\n\treturn (\r\n\t\t<input\r\n\t\t\tname=\"picker\"\r\n\t\t\ttype=\"color\"\r\n\t\t\tvalue={color}\r\n\t\t\tonChange={(e) => dispatch(getColor(e.target.value))}\r\n\t\t\tstyle={{ background: `${color}` }}\r\n\t\t\tclassName={`w-full h-full`}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nfunction HexInput(props) {\r\n\tconst color = useSelector(state => state.color)\r\n\tconst dispatch = useDispatch()\r\n\treturn (\r\n\t\t<input\r\n\t\t\tname=\"color-picker-2\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tvalue={color}\r\n\t\t\tonChange={(e) => dispatch(getColor(e.target.value))}\r\n\t\t\tclassName=\"border-2 border-gray-300 text-gray-600 uppercase focus:outline-none px-4\"\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nfunction ColorInput() {\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<section className=\"grid grid-cols-1 lg:grid-cols-3 my-8\">\r\n\r\n\t\t\t\t<Option\r\n\t\t\t\t\ticon={<MdColorLens />}\r\n\t\t\t\t\tname=\"Random\"\r\n\t\t\t\t\tnode={<Randomizer />}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Option\r\n\t\t\t\t\ticon={<MdColorize />}\r\n\t\t\t\t\tname=\"Picker\"\r\n\t\t\t\t\tnode={<Picker />}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Option\r\n\t\t\t\t\ticon={<MdFormatColorText />}\r\n\t\t\t\t\tname=\"Hex\"\r\n\t\t\t\t\tnode={<HexInput />}\r\n\t\t\t\t/>\r\n\r\n\t\t\t</section>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default ColorInput\r\n","import React from 'react';\r\nimport TintShade from \"./TintShade\";\r\nimport Picker from \"./Picker\";\r\n\r\nfunction Main() {\r\n\r\n\treturn (\r\n\t\t<main className=\"grid grid-cols-12\">\r\n\t\t\t<div className=\"col-span-12\">\r\n\t\t\t\t<Picker />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-span-12 grid grid-cols-3 md:grid-cols-9\">\r\n\t\t\t\t<TintShade />\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t)\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\n\r\nimport Header from \"./components/Header\";\r\nimport Main from \"./components/Main\";\r\n\r\nfunction App() {\r\n  return (\r\n\t\t<React.Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<Main />\r\n\t\t</React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from \"redux\"\r\n\r\nconst colorReducer = (state = \"#82B4C4\", action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'GET_COLOR':\r\n\t\t\treturn action.payload === \"\" ? \"#\" : action.payload\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst tintsShadeReducer = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'SET_TINTS_AND_SHADES':\r\n\t\t\treturn action.payload\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n\tcolor: colorReducer,\r\n\tpalette: tintsShadeReducer\r\n})\r\n\r\nexport default allReducers\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport allReducers from \"./redux/reducers\"\r\nimport { Provider } from \"react-redux\"\r\nimport { createStore } from \"redux\"\r\n\r\nconst store = createStore(\r\n\tallReducers,\r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}